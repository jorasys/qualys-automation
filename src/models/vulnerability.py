"""
Vulnerability model
"""
from sqlalchemy import Column, String, Text, DateTime, Float, Enum
from sqlalchemy.orm import relationship
from .base import BaseModel
import enum


class SeverityLevel(enum.Enum):
    """Vulnerability severity levels"""
    CRITICAL = "Critical"
    HIGH = "High"
    MEDIUM = "Medium"
    LOW = "Low"
    INFO = "Info"


class VulnerabilityStatus(enum.Enum):
    """Vulnerability status"""
    NEW = "New"
    ASSIGNED = "Assigned"
    IN_PROGRESS = "In_Progress"
    FIXED = "Fixed"
    VERIFIED = "Verified"
    CLOSED = "Closed"


class Vulnerability(BaseModel):
    """Vulnerability model"""
    __tablename__ = 'vulnerabilities'
    
    # Qualys specific fields
    qid = Column(String(20), unique=True, nullable=False, index=True)
    title = Column(String(500), nullable=False)
    severity = Column(Enum(SeverityLevel), nullable=False, index=True)
    category = Column(String(100))
    description = Column(Text)
    
    # Scoring and identification
    cvss_score = Column(Float)
    cve_ids = Column(Text)  # JSON string of CVE IDs
    
    # Temporal information
    first_detected = Column(DateTime)
    last_detected = Column(DateTime)
    
    # Status tracking
    status = Column(Enum(VulnerabilityStatus), default=VulnerabilityStatus.NEW)
    
    # Relations
    instances = relationship("VulnerabilityInstance", back_populates="vulnerability", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<Vulnerability(qid={self.qid}, title='{self.title[:50]}...', severity={self.severity.value})>"
    
    @property
    def severity_score(self) -> int:
        """Get numeric severity score for sorting"""
        severity_scores = {
            SeverityLevel.CRITICAL: 5,
            SeverityLevel.HIGH: 4,
            SeverityLevel.MEDIUM: 3,
            SeverityLevel.LOW: 2,
            SeverityLevel.INFO: 1
        }
        return severity_scores.get(self.severity, 0)
    
    def get_cve_list(self) -> list:
        """Get CVE IDs as a list"""
        if not self.cve_ids:
            return []
        
        try:
            import json
            return json.loads(self.cve_ids)
        except (json.JSONDecodeError, TypeError):
            # Fallback for comma-separated values
            return [cve.strip() for cve in self.cve_ids.split(',') if cve.strip()]
    
    def set_cve_list(self, cve_list: list):
        """Set CVE IDs from a list"""
        if not cve_list:
            self.cve_ids = None
        else:
            import json
            self.cve_ids = json.dumps(cve_list)