"""
Vulnerability repository with specialized queries
"""
from typing import List, Optional
from sqlalchemy.orm import Session
from sqlalchemy import desc, func

from .base_repository import BaseRepository
from ..models.vulnerability import Vulnerability, SeverityLevel, VulnerabilityStatus


class VulnerabilityRepository(BaseRepository[Vulnerability]):
    """Repository for vulnerability operations"""
    
    def __init__(self):
        super().__init__(Vulnerability)
    
    def get_by_qid(self, session: Session, qid: str) -> Optional[Vulnerability]:
        """Get vulnerability by Qualys ID"""
        return session.query(Vulnerability).filter(Vulnerability.qid == qid).first()
    
    def get_by_severity(self, session: Session, severity: SeverityLevel, 
                       limit: Optional[int] = None) -> List[Vulnerability]:
        """Get vulnerabilities by severity level"""
        query = session.query(Vulnerability).filter(Vulnerability.severity == severity)
        if limit:
            query = query.limit(limit)
        return query.all()
    
    def get_critical_and_high(self, session: Session) -> List[Vulnerability]:
        """Get critical and high severity vulnerabilities"""
        return session.query(Vulnerability).filter(
            Vulnerability.severity.in_([SeverityLevel.CRITICAL, SeverityLevel.HIGH])
        ).order_by(desc(Vulnerability.severity)).all()
    
    def get_by_status(self, session: Session, status: VulnerabilityStatus) -> List[Vulnerability]:
        """Get vulnerabilities by status"""
        return session.query(Vulnerability).filter(Vulnerability.status == status).all()
    
    def get_new_vulnerabilities(self, session: Session) -> List[Vulnerability]:
        """Get new vulnerabilities"""
        return self.get_by_status(session, VulnerabilityStatus.NEW)
    
    def search_by_title(self, session: Session, search_term: str) -> List[Vulnerability]:
        """Search vulnerabilities by title"""
        return session.query(Vulnerability).filter(
            Vulnerability.title.ilike(f"%{search_term}%")
        ).all()
    
    def get_with_cve(self, session: Session) -> List[Vulnerability]:
        """Get vulnerabilities that have CVE IDs"""
        return session.query(Vulnerability).filter(
            Vulnerability.cve_ids.isnot(None)
        ).all()
    
    def get_statistics(self, session: Session) -> dict:
        """Get vulnerability statistics"""
        total = session.query(Vulnerability).count()
        
        severity_stats = session.query(
            Vulnerability.severity,
            func.count(Vulnerability.id)
        ).group_by(Vulnerability.severity).all()
        
        status_stats = session.query(
            Vulnerability.status,
            func.count(Vulnerability.id)
        ).group_by(Vulnerability.status).all()
        
        return {
            'total': total,
            'by_severity': {severity.value: count for severity, count in severity_stats},
            'by_status': {status.value: count for status, count in status_stats}
        }
    
    def get_top_vulnerabilities(self, session: Session, limit: int = 10) -> List[Vulnerability]:
        """Get top vulnerabilities by severity and instance count"""
        return session.query(Vulnerability).join(
            Vulnerability.instances
        ).group_by(Vulnerability.id).order_by(
            desc(Vulnerability.severity),
            desc(func.count(Vulnerability.instances))
        ).limit(limit).all()
    
    def update_status(self, session: Session, qid: str, status: VulnerabilityStatus) -> bool:
        """Update vulnerability status by QID"""
        vuln = self.get_by_qid(session, qid)
        if vuln:
            vuln.status = status
            session.flush()
            return True
        return False
    
    def bulk_update_status(self, session: Session, qids: List[str], 
                          status: VulnerabilityStatus) -> int:
        """Bulk update vulnerability status"""
        updated = session.query(Vulnerability).filter(
            Vulnerability.qid.in_(qids)
        ).update({Vulnerability.status: status}, synchronize_session=False)
        session.flush()
        return updated